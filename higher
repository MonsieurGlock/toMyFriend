#include <SFML/Graphics.hpp>
#include <time.h>
using namespace sf;
#define HEIGHT 900
#define WIDTH 800
struct object
{
    float obX, obY, sizeX, sizeY;
    bool col;
};

int main()
{
    bool BcanJump = true;
    float FjumpVel = 0;
    int x = 0;

    RenderWindow app(VideoMode(WIDTH, HEIGHT), "Doodle Jump");
    app.setFramerateLimit(60);
    //Player
    struct object playerInfo;
    playerInfo.obX = 800 / 2;
    playerInfo.obX = 800 / 2;
    sf::RectangleShape player(sf::Vector2f(100.0f, 100.0f));
    player.setFillColor(sf::Color::Red);
    player.setOrigin(sf::Vector2f(50.0f, 100.0f));
    player.setPosition(sf::Vector2f(800 / 2, HEIGHT));
    app.setFramerateLimit(60);

    //test object
    sf::RectangleShape object(sf::Vector2f(100.0f, 100.0f));
    object.setFillColor(sf::Color::Yellow);
    object.setOrigin(sf::Vector2f(100.0f, 50.0f));
    object.setPosition(sf::Vector2f(800 / 2, 600));

    while (app.isOpen())
    {

        Event e;
        while (app.pollEvent(e))
        {
            if (e.type == Event::Closed)
                app.close();
        }
        sf::Vector2i mousePos = sf::Mouse::getPosition(app);
        sf::Vector2f playerPos = player.getPosition();
        float vecol;

        vecol = (mousePos.x - 400) / 12;
        if (playerPos.x > -1 && playerPos.x < 801) {
            if (mousePos.x < 400) {
                player.move(vecol, 0);
            }
            if (mousePos.x > 400) {
                player.move(vecol, 0);
            }
        }
        if (playerPos.x < 2) {
            player.setPosition(795, playerPos.y);
        }
        if (playerPos.x > 798) {
            player.setPosition(5, playerPos.y);
        }
        //Jump
        if (sf::Keyboard::isKeyPressed(sf::Keyboard::Space) && BcanJump == true) {
            FjumpVel = 30;
            BcanJump = false;
        }
        if (playerPos.y >= HEIGHT) {
            BcanJump == true;
            FjumpVel = 30;
        }
        if (FjumpVel != 0) {
            player.move(0, -FjumpVel);
            FjumpVel -= 0.98;
        }


            if ((playerPos.x + 100 > 400) && (playerPos.x + 100 < 400 + 100)        // player's horizontal range can touch the platform
                && (playerPos.y + 100 > 600) && (playerPos.y + 100 < 600 + 100)  // player's vertical   range can touch the platform
                && (FjumpVel < 0)) // player is falling
            {
                
                FjumpVel = 30;
            }

        

        printf("%f\n", playerPos.x);
        app.clear();
        app.draw(player);
        app.draw(object);
        app.display();
    }

    return 0;
}
